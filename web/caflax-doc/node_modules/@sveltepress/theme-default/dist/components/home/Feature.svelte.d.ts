export default Feature;
type Feature = SvelteComponent<Props, {
    [evt: string]: CustomEvent<any>;
}, {}> & {
    $$bindings?: "" | undefined;
};
declare const Feature: $$__sveltets_2_IsomorphicComponent<{
    /**
     * Index of the feature card
     */
    i: any;
    /**
     * Title of the feature card
     */
    title: any;
    /**
     * Description of the feature card
     */
    description: any;
    /**
     * Link to navigate to when the card is clicked
     */
    link?: any;
    /**
     * Function to call when the card is pressed
     */
    onkeypress: (e: any) => any;
    /**
     * Custom icon to display in the card
     */
    icon?: import("./types").CustomIcon | undefined;
}, {
    [evt: string]: CustomEvent<any>;
}, {}, {}, "">;
type Props = {
    /**
     * Index of the feature card
     */
    i: any;
    /**
     * Title of the feature card
     */
    title: any;
    /**
     * Description of the feature card
     */
    description: any;
    /**
     * Link to navigate to when the card is clicked
     */
    link?: any;
    /**
     * Function to call when the card is pressed
     */
    onkeypress: (e: any) => any;
    /**
     * Custom icon to display in the card
     */
    icon?: import("./types").CustomIcon | undefined;
};
interface $$__sveltets_2_IsomorphicComponent<Props extends Record<string, any> = any, Events extends Record<string, any> = any, Slots extends Record<string, any> = any, Exports = {}, Bindings = string> {
    new (options: import("svelte").ComponentConstructorOptions<Props>): import("svelte").SvelteComponent<Props, Events, Slots> & {
        $$bindings?: Bindings;
    } & Exports;
    (internal: unknown, props: Props & {
        $$events?: Events;
        $$slots?: Slots;
    }): Exports & {
        $set?: any;
        $on?: any;
    };
    z_$$bindings?: Bindings;
}
