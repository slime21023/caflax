export default Expansion;
type Expansion = SvelteComponent<Props, {
    [evt: string]: CustomEvent<any>;
}, {}> & {
    $$bindings?: "" | undefined;
};
declare const Expansion: $$__sveltets_2_IsomorphicComponent<{
    /**
     * The title of the expansion
     */
    title: string;
    /**
     * Determine whether the expansion is expanded or not. It is recomended to use `bind:expanded`
     */
    expanded: boolean;
    /**
     * Determine the expand direction, `false` means down, `true` means up
     */
    reverse: boolean;
    /**
     * Custom header style
     */
    headerStyle: string;
    /**
     * custom fold icon
     */
    iconFold: import("svelte").Snippet;
    /**
     * custom expand icon
     */
    iconExpanded: import("svelte").Snippet;
    /**
     * custom title content
     */
    customTitle: import("svelte").Snippet;
    /**
     * The code type of the icon, `svelte` or `md`
     */
    codeType: "svelte" | "md";
}, {
    [evt: string]: CustomEvent<any>;
}, {}, {}, "">;
type Props = {
    /**
     * The title of the expansion
     */
    title: string;
    /**
     * Determine whether the expansion is expanded or not. It is recomended to use `bind:expanded`
     */
    expanded: boolean;
    /**
     * Determine the expand direction, `false` means down, `true` means up
     */
    reverse: boolean;
    /**
     * Custom header style
     */
    headerStyle: string;
    /**
     * custom fold icon
     */
    iconFold: import("svelte").Snippet;
    /**
     * custom expand icon
     */
    iconExpanded: import("svelte").Snippet;
    /**
     * custom title content
     */
    customTitle: import("svelte").Snippet;
    /**
     * The code type of the icon, `svelte` or `md`
     */
    codeType: "svelte" | "md";
};
interface $$__sveltets_2_IsomorphicComponent<Props extends Record<string, any> = any, Events extends Record<string, any> = any, Slots extends Record<string, any> = any, Exports = {}, Bindings = string> {
    new (options: import("svelte").ComponentConstructorOptions<Props>): import("svelte").SvelteComponent<Props, Events, Slots> & {
        $$bindings?: Bindings;
    } & Exports;
    (internal: unknown, props: Props & {
        $$events?: Events;
        $$slots?: Slots;
    }): Exports & {
        $set?: any;
        $on?: any;
    };
    z_$$bindings?: Bindings;
}
