var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { existsSync, readFileSync } from 'node:fs';
import { resolve } from 'node:path';
import process from 'node:process';
import { visit } from 'unist-util-visit';
// eslint-disable-next-line regexp/optimal-quantifier-concatenation
export var importRe = /^@code\((\S+)(,\d+(,\d+)?)?\)/;
var codeImport = function () {
    return function (tree, vFile) { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            visit(tree, function (node, idx, parent) {
                var _a;
                if (node.type === 'paragraph' && node.children) {
                    var textNode = node.children[0];
                    if (textNode && textNode.type === 'text') {
                        var matches = importRe.exec(textNode.value);
                        if (matches) {
                            var params = matches[1];
                            if (params) {
                                var _b = params.split(','), path = _b[0], start = _b[1], end = _b[2];
                                var lang = (_a = path.split('/').pop()) === null || _a === void 0 ? void 0 : _a.split('.').pop();
                                var filename = vFile.path;
                                if (!filename)
                                    return;
                                var absolutePathArray = filename.split('/');
                                absolutePathArray.pop();
                                var dir = absolutePathArray.join('/');
                                var realPath = path.startsWith('.') ? resolve(dir, path) : resolve(process.cwd(), ".".concat(path));
                                if (existsSync(realPath)) {
                                    var valueArr = readFileSync(realPath, 'utf-8').split('\n');
                                    var startLine = Number(start);
                                    var endLine = Number(end);
                                    if (!Number.isNaN(startLine)) {
                                        valueArr = valueArr.slice(startLine - 1);
                                        if (!Number.isNaN(endLine) && endLine > startLine)
                                            valueArr = valueArr.slice(0, endLine - startLine + 1);
                                    }
                                    if (valueArr.length) {
                                        var firstLine = valueArr[0];
                                        var initialBlankNumbers_1 = firstLine.length - firstLine.trimStart().length;
                                        if (initialBlankNumbers_1 > 0)
                                            valueArr = valueArr.map(function (line) { return line.replace(new RegExp("^ {".concat(initialBlankNumbers_1, "}")), ''); });
                                    }
                                    if (!valueArr[0].startsWith('// @noErrors') && lang === 'ts')
                                        valueArr.unshift('// @noErrors');
                                    var codeStr = valueArr.join('\n');
                                    var node_1 = {
                                        type: 'code',
                                        lang: lang,
                                        value: codeStr.endsWith(',') ? codeStr.slice(0, codeStr.length - 1) : codeStr,
                                    };
                                    parent.children.splice(idx, 1, node_1);
                                }
                            }
                        }
                    }
                }
            });
            return [2 /*return*/];
        });
    }); };
};
export default codeImport;
