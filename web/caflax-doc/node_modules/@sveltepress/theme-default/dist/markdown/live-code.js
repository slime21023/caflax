var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import { existsSync, mkdirSync, readFileSync, writeFileSync } from 'node:fs';
import { resolve } from 'node:path';
import process from 'node:process';
import { mdToSvelte } from '@sveltepress/vite';
import { fromMarkdown } from 'mdast-util-from-markdown';
import { gfmFromMarkdown } from 'mdast-util-gfm';
import { uid } from 'uid';
import { visit } from 'unist-util-visit';
import { highlighter, themeOptionsRef } from '../index.js';
import admonitions from './admonitions.js';
import anchors from './anchors.js';
import codeImport from './code-import.js';
import installPkg from './install-pkg.js';
import links from './links.js';
var BASE_PATH = resolve(process.cwd(), '.sveltepress/live-code');
var LIVE_CODE_MAP = resolve(BASE_PATH, 'live-code-map.json');
var SUPPORTED_LIVE_LANGS = ['svelte', 'md'];
var globalComponentsImporters = [
    'import { Expansion, Link, CopyCode, Tabs, TabPanel, InstallPkg, IconifyIcon, CodeBlock } from \'@sveltepress/theme-default/components\'',
];
var twoslashImporter = ['import Floating from \'@sveltepress/twoslash/FloatingWrapper.svelte\''];
function createAsyncImportCode(componentPath) {
    return "\n{#await import('".concat(componentPath, "')}\n  <div class=\"svp--async-live-code--loading\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1em\" height=\"1em\" viewBox=\"0 0 24 24\">\n      <defs><filter id=\"svgSpinnersGooeyBalls20\"><feGaussianBlur in=\"SourceGraphic\" result=\"y\" stdDeviation=\"1\"/><feColorMatrix in=\"y\" result=\"z\" values=\"1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 18 -7\"/><feBlend in=\"SourceGraphic\" in2=\"z\"/></filter></defs><g filter=\"url(#svgSpinnersGooeyBalls20)\"><circle cx=\"5\" cy=\"12\" r=\"4\" fill=\"currentColor\"><animate attributeName=\"cx\" calcMode=\"spline\" dur=\"2s\" keySplines=\".36,.62,.43,.99;.79,0,.58,.57\" repeatCount=\"indefinite\" values=\"5;8;5\"/></circle><circle cx=\"19\" cy=\"12\" r=\"4\" fill=\"currentColor\"><animate attributeName=\"cx\" calcMode=\"spline\" dur=\"2s\" keySplines=\".36,.62,.43,.99;.79,0,.58,.57\" repeatCount=\"indefinite\" values=\"19;16;19\"/></circle><animateTransform attributeName=\"transform\" dur=\"0.75s\" repeatCount=\"indefinite\" type=\"rotate\" values=\"0 12 12;360 12 12\"/></g>\n    </svg>\n  </div>\n{:then { default: ImportedComponent }}\n  <ImportedComponent />\n{:catch err}\n  <div class=\"svp--async-live-code--error\">\n    {err}\n  </div>\n{/await}\n");
}
var liveCode = function () {
    var _this = this;
    if (!existsSync(BASE_PATH)) {
        mkdirSync(BASE_PATH, {
            recursive: true,
        });
    }
    if (!existsSync(LIVE_CODE_MAP))
        writeFileSync(LIVE_CODE_MAP, '{}');
    return function (tree, vFile) { return __awaiter(_this, void 0, void 0, function () {
        var hasScript, liveCodePaths, asyncNodeOperations, liveCodeImports;
        var _this = this;
        var _a, _b;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    hasScript = false;
                    liveCodePaths = [];
                    asyncNodeOperations = [];
                    visit(tree, function (node, idx, parent) {
                        var meta = node.meta, lang = node.lang, type = node.type, data = node.data;
                        var metaArray = (meta === null || meta === void 0 ? void 0 : meta.split(' ')) || [];
                        var isAsync = metaArray.includes('async');
                        if (type === 'code'
                            && SUPPORTED_LIVE_LANGS.includes(lang)
                            && metaArray.includes('live')
                            && idx !== null) {
                            var getLiveNodeFromLang_1 = function (lang) { return __awaiter(_this, void 0, void 0, function () {
                                var idNameMap, blockId, name, svelteFileName, path, componentName, componentPath, svelteComponent, noAst, _a, _b;
                                var _c;
                                return __generator(this, function (_d) {
                                    switch (_d.label) {
                                        case 0:
                                            if (!(lang === 'svelte')) return [3 /*break*/, 1];
                                            idNameMap = JSON.parse(readFileSync(LIVE_CODE_MAP, 'utf-8'));
                                            blockId = "".concat(vFile.path, "-").concat(idx);
                                            name = idNameMap[blockId];
                                            if (!name) {
                                                svelteFileName = "LiveCode".concat(uid());
                                                name = idNameMap[blockId] = "".concat(svelteFileName, ".svelte");
                                                writeFileSync(LIVE_CODE_MAP, JSON.stringify(idNameMap, null, 2));
                                            }
                                            path = resolve(BASE_PATH, name);
                                            writeFileSync(path, node.value || '');
                                            componentName = name.replace(/\.svelte$/, '');
                                            componentPath = "/.sveltepress/live-code/".concat(name);
                                            if (!isAsync) {
                                                liveCodePaths.push({
                                                    componentName: componentName,
                                                    path: componentPath,
                                                });
                                            }
                                            svelteComponent = {
                                                type: 'html',
                                                value: "\n<div class=\"svp-live-code--demo\">\n  ".concat(isAsync ? createAsyncImportCode(componentPath) : "<".concat(componentName, " />"), "\n</div>\n"),
                                            };
                                            return [2 /*return*/, [svelteComponent]];
                                        case 1:
                                            if (!(lang === 'md')) return [3 /*break*/, 5];
                                            noAst = meta.split(' ').includes('no-ast');
                                            _a = [[
                                                    {
                                                        type: 'html',
                                                        value: '<div class="p-4">',
                                                    }
                                                ]];
                                            if (!noAst) return [3 /*break*/, 3];
                                            _c = {
                                                type: 'html'
                                            };
                                            return [4 /*yield*/, mdToSvelte({
                                                    mdContent: node.value,
                                                    filename: 'live-code.md',
                                                    remarkPlugins: [
                                                        admonitions,
                                                        links,
                                                        anchors,
                                                        codeImport,
                                                        installPkg,
                                                    ],
                                                    highlighter: highlighter,
                                                })];
                                        case 2:
                                            _b = [
                                                (_c.value = (_d.sent()).code,
                                                    _c)
                                            ];
                                            return [3 /*break*/, 4];
                                        case 3:
                                            _b = fromMarkdown("\n".concat(node.value, "\n"), { mdastExtensions: [gfmFromMarkdown()] }).children;
                                            _d.label = 4;
                                        case 4: return [2 /*return*/, __spreadArray.apply(void 0, [__spreadArray.apply(void 0, _a.concat([(_b), true])), [
                                                    {
                                                        type: 'html',
                                                        value: '</div>',
                                                    },
                                                ], false])];
                                        case 5: return [2 /*return*/];
                                    }
                                });
                            }); };
                            var asyncAdd = function () { return __awaiter(_this, void 0, void 0, function () {
                                var codeHighlightNode, liveCodeNode, _a;
                                var _b;
                                var _c, _d;
                                return __generator(this, function (_e) {
                                    switch (_e.label) {
                                        case 0:
                                            codeHighlightNode = {
                                                type: 'code',
                                                lang: lang,
                                                value: node.value,
                                                data: data,
                                                meta: meta,
                                            };
                                            _b = {
                                                type: 'liveCode',
                                                data: {
                                                    hName: 'div',
                                                    hProperties: {
                                                        className: 'svp-live-code--container',
                                                    },
                                                }
                                            };
                                            _a = [[
                                                    {
                                                        type: 'html',
                                                        value: '<div></div>',
                                                    }
                                                ]];
                                            return [4 /*yield*/, getLiveNodeFromLang_1(lang)];
                                        case 1:
                                            liveCodeNode = (_b.children = __spreadArray.apply(void 0, [__spreadArray.apply(void 0, _a.concat([_e.sent(), true])), [
                                                    {
                                                        type: 'html',
                                                        value: "<Expansion codeType=\"".concat(lang, "\" title=\"").concat(((_d = (_c = themeOptionsRef.value) === null || _c === void 0 ? void 0 : _c.i18n) === null || _d === void 0 ? void 0 : _d.expansionTitle) || 'Click fold/expand code', "\" reverse={true}>"),
                                                    },
                                                    codeHighlightNode,
                                                    {
                                                        type: 'html',
                                                        value: '</Expansion>',
                                                    },
                                                ], false]),
                                                _b);
                                            parent.children.splice(idx, 1, liveCodeNode);
                                            return [2 /*return*/];
                                    }
                                });
                            }); };
                            asyncNodeOperations.push(asyncAdd());
                        }
                    });
                    return [4 /*yield*/, Promise.allSettled(asyncNodeOperations)];
                case 1:
                    _c.sent();
                    liveCodeImports = liveCodePaths.map(function (_a) {
                        var componentName = _a.componentName, path = _a.path;
                        return "import ".concat(componentName, " from '").concat(path, "'");
                    });
                    visit(tree, function (node, idx, parent) {
                        if (node.type === 'html' && node.value.startsWith('<script') && !hasScript) {
                            hasScript = true;
                            var value = node.value.replace(/^<script[ \w+="]*>/, function (m) { var _a, _b; return __spreadArray(__spreadArray(__spreadArray([m], globalComponentsImporters, true), (((_b = (_a = themeOptionsRef.value) === null || _a === void 0 ? void 0 : _a.highlighter) === null || _b === void 0 ? void 0 : _b.twoslash) ? [twoslashImporter] : []), true), liveCodeImports, true).join('\n'); });
                            parent.children.splice(idx, 1, {
                                type: 'html',
                                value: value,
                            });
                        }
                    });
                    if (!hasScript) {
                        tree.children.unshift({
                            type: 'html',
                            value: __spreadArray(__spreadArray(__spreadArray(__spreadArray(['<script>'], globalComponentsImporters, true), (((_b = (_a = themeOptionsRef.value) === null || _a === void 0 ? void 0 : _a.highlighter) === null || _b === void 0 ? void 0 : _b.twoslash) ? [twoslashImporter] : []), true), liveCodeImports, true), ['</script>'], false).join('\n'),
                        });
                    }
                    return [2 /*return*/];
            }
        });
    }); };
};
export default liveCode;
