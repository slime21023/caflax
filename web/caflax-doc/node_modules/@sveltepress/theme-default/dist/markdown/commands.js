export var COMMAND_RE = /\/\/ \[svp! ((hl)|(~~)|(\+\+)|(--)|(df)|(fc)|(!!))(:\S+)?\]/;
export var highlightLine = function (linesNumberToHighlight, idx, lines) {
    var num = Number(linesNumberToHighlight);
    if (Number.isNaN(num) || num < 1)
        return warpLine('svp-code-block--hl', idx);
    var max = lines - idx;
    return Array.from({ length: num > max ? max : num }).map(function (_, i) {
        var highlightIndex = i + idx;
        return warpLine('svp-code-block--hl', highlightIndex);
    }).join('\n');
};
export var diff = function (addOrCut, idx) {
    var name = addOrCut === '-' ? 'sub' : 'add';
    var mark = addOrCut === '-' ? '-' : '+';
    return warpLine("svp-code-block--diff-bg-".concat(name), idx, "<div class=\"svp-code-block--diff-".concat(name, "\">").concat(mark, "</div>"));
};
export var focus = function (linesNumberToFocus, idx, lines) {
    var num = Number(linesNumberToFocus);
    var wrapFocus = function (top, height) {
        return "<div class=\"svp-code-block--focus\" style=\"top: ".concat(top, ";height: ").concat(height, ";\"></div>");
    };
    var start = (Number.isNaN(num) || num < 1) ? idx : idx + num - 1;
    var res = [
        wrapFocus('0', "calc(12px + ".concat(idx * 1.5, "em)")),
    ];
    res.push(wrapFocus("calc(12px + ".concat((start + 1) * 1.5, "em)"), "calc(12px + ".concat((lines - start - 1) * 1.5, "em)")));
    return res.join('\n');
};
export var COMMAND_CHEAT_LIST = {
    // highlight
    'hl': highlightLine,
    '~~': highlightLine,
    // diff
    '++': diff,
    '--': function (_p, i, lines) { return diff('-', i, lines); },
    'df': diff,
    // focus
    'fc': focus,
    '!!': focus,
};
export var processCommands = function (line, lineIndex, lineLength) {
    var commandDoms = [];
    var newLine = line;
    var re = /\/\/ \[svp! ((hl)|(~~)|(\+\+)|(--)|(df)|(fc)|(!!))(:\S+)?\]/g;
    var matches = re.exec(line);
    while (matches && matches.length) {
        var commandRaw = matches[0];
        // [svp! command:param1,params2] => command:param1,params2
        var command = commandRaw.replace(/^\/\/ \[svp! /, '').replace(/\]$/, '');
        var _a = command.split(':'), name = _a[0], params = _a[1];
        var commandExecutor = COMMAND_CHEAT_LIST[name];
        if (commandExecutor)
            commandDoms.push(commandExecutor(params, lineIndex, lineLength));
        var idx = newLine.indexOf(commandRaw);
        newLine = "".concat(newLine.slice(0, idx)).concat(newLine.slice(idx + commandRaw.length));
        matches = re.exec(line);
    }
    return [commandDoms, newLine];
};
function warpLine(classes, idx, content) {
    if (content === void 0) { content = ''; }
    return "<div class=\"svp-code-block--command-line ".concat(classes, "\"  style=\"top: calc(").concat(idx * 1.5, "em + 12px);\">").concat(content, "</div>");
}
