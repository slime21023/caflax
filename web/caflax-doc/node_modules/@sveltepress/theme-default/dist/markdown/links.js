var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import { visit } from 'unist-util-visit';
// parse [foo](bar) to <Link label="foo" to="bar" />
var anchors = function () {
    return function (tree) {
        visit(tree, function (node, idx, parent) {
            var _a;
            if (node.type === 'link') {
                (_a = parent.children).splice.apply(_a, __spreadArray(__spreadArray([idx, 1, {
                        type: 'html',
                        value: "<Link to=\"".concat(node.url, "\">{#snippet labelRenderer()}"),
                    }], node.children, false), [{
                        type: 'html',
                        value: '{/snippet}</Link>',
                    }, {
                        type: 'SvpHeading',
                        value: node.children[0].value,
                    }], false));
            }
            if (node.type === 'SvpHeading') {
                parent.children.splice(idx, 1);
            }
        });
    };
};
export default anchors;
