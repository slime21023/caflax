var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { visit } from 'unist-util-visit';
import highlighter from './highlighter.js';
// eslint-disable-next-line regexp/no-super-linear-backtracking, regexp/optimal-quantifier-concatenation, regexp/no-misleading-capturing-group
export var pkgRe = /^@install-pkg\((\S+)(,\S+)?\)/;
var installPkg = function () {
    return function (tree) { return __awaiter(void 0, void 0, void 0, function () {
        var tasks;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    tasks = [];
                    visit(tree, function (node, idx, parent) {
                        if (node.type === 'paragraph' && node.children) {
                            var textNode = node.children[0];
                            if (textNode && textNode.type === 'text') {
                                var matches = pkgRe.exec(textNode.value);
                                if (matches) {
                                    var pkgNameMaybeWithCustomScript = matches[1];
                                    if (pkgNameMaybeWithCustomScript) {
                                        var _a = pkgNameMaybeWithCustomScript.split(','), pkgName_1 = _a[0], customScript_1 = _a[1];
                                        var wrapWithSnippet_1 = function (snippetName, installScript) { return __awaiter(void 0, void 0, void 0, function () {
                                            var code, _a, _b;
                                            var _c;
                                            return __generator(this, function (_d) {
                                                switch (_d.label) {
                                                    case 0:
                                                        code = "".concat(snippetName, " ").concat(customScript_1 || installScript, " ").concat(pkgName_1);
                                                        _c = {
                                                            type: 'html'
                                                        };
                                                        _b = (_a = "{#snippet ".concat(snippetName, "()}")).concat;
                                                        return [4 /*yield*/, highlighter(code, 'sh')];
                                                    case 1: return [2 /*return*/, (_c.value = _b.apply(_a, [_d.sent(), "{/snippet}"]),
                                                            _c)];
                                                }
                                            });
                                        }); };
                                        var asyncTask = function () { return __awaiter(void 0, void 0, void 0, function () {
                                            var npmNode, yarnNode, pnpmNode;
                                            return __generator(this, function (_a) {
                                                switch (_a.label) {
                                                    case 0: return [4 /*yield*/, wrapWithSnippet_1('npm', 'install --save')];
                                                    case 1:
                                                        npmNode = _a.sent();
                                                        return [4 /*yield*/, wrapWithSnippet_1('yarn', 'add')];
                                                    case 2:
                                                        yarnNode = _a.sent();
                                                        return [4 /*yield*/, wrapWithSnippet_1('pnpm', 'install')];
                                                    case 3:
                                                        pnpmNode = _a.sent();
                                                        parent.children.splice(idx, 1, {
                                                            type: 'InstallPkg',
                                                            data: {
                                                                hName: 'InstallPkg',
                                                            },
                                                            children: [
                                                                npmNode,
                                                                yarnNode,
                                                                pnpmNode,
                                                            ],
                                                        });
                                                        return [2 /*return*/];
                                                }
                                            });
                                        }); };
                                        tasks.push(asyncTask());
                                    }
                                }
                            }
                        }
                    });
                    return [4 /*yield*/, Promise.all(tasks)];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); };
};
export default installPkg;
